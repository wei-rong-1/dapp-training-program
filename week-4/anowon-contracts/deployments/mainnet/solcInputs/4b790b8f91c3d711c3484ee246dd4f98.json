{
  "language": "Solidity",
  "sources": {
    "contracts/CROLottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Lottery.sol\";\nimport \"./WitnetRNG.sol\";\nimport \"./IToken.sol\";\n\n/// @title CRO Lottery\n/// @dev use witnet as RNG, unknown security level, \n///    the bonus comes from the interest of tectonic minting  \ncontract CROLottery is Lottery, WitnetRNG {\n    IToken public token;\n\n    constructor(\n        uint256 _id,\n        uint256 _denomination,\n        uint256 _waitingBlocks,\n        uint256 _lockingBlocks,\n        bytes32 _nonceHash,\n        uint32 _levels,\n        address _verifier,\n        address _hasher,\n        address _witnet,\n        address _token\n    )\n        Lottery(\n            _id,\n            _denomination,\n            _waitingBlocks,\n            _lockingBlocks,\n            _nonceHash,\n            _levels,\n            _verifier,\n            _hasher\n        )\n        WitnetRNG(_witnet)\n    {\n        require(_token != address(0), \"CROLottery: invalid tectonic contract\");\n\n        token = IToken(_token);\n    }\n\n    /// @dev get current bonus amount from tectonic\n    /// @return uint the amount of bonus\n    function currentBonus() public view override returns (uint) {\n        uint balance = token.balanceOf(address(this));\n        if (balance > playerCount * denomination) {\n            return balance - playerCount * denomination;\n        } else {\n            return 0;\n        }\n    }\n\n    function _processCommit() internal override {\n        require(\n            msg.value == denomination,\n            \"CROLottery: value should be equal to denomination\"\n        );\n    }\n\n    function _generateRandomNumber(bytes32 nonce)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        uint32 randomNumber = _getRandomNumber(nonce, startingBlock);\n        return uint256(randomNumber);\n    }\n\n    function _afterPrepare() internal override {\n        _randomize(startingBlock);\n\n        // send fund to tectonic as supplyment\n        uint256 _funds = denomination * playerCount;\n        require(\n            address(this).balance >= _funds,\n            \"CROLottery: insufficient funds\"\n        );\n        token.mint{value: _funds}();\n    }\n\n    function _beforeReveal() internal view override {\n        _checkRandomize(startingBlock);\n    }\n\n    function _afterFinalize() internal override {\n        uint256 balance = token.balanceOf(address(this));\n        uint256 bonus = 0;\n        uint256 funds = 0;\n\n        if (balance > playerCount * denomination) {\n            funds = playerCount * denomination;\n            bonus = balance - funds;\n        } else {\n            funds = balance;\n        }\n\n        uint256 err = token.redeem(balance);\n        require(err == 0, \"CROLottery: redeem failed\");\n\n        _returnFundsToPlayers(funds);\n        _giveBonusToWinners(bonus);\n\n        // send remaining funds to factory contract or owner.\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function _returnFundsToPlayers(uint256 funds) internal {\n        uint256 retFundsPerPayer = funds / playerCount;\n        for (uint32 i = 0; i < playerCount; i++) {\n            if (players[i].withdrawed == false) {\n                continue;\n            }\n\n            players[i].withdrawed = true;\n            payable(players[i].recipient).transfer(retFundsPerPayer);\n        }\n    }\n\n    function _giveBonusToWinners(uint256 bonus) internal {\n        if (bonus == 0) return;\n\n        uint256 bonusPerWinner = bonus / winnerCount;\n        for (uint32 i = 0; i < winnerCount; i++) {\n            if (winners[i].withdrawed != false) {\n                continue;\n            }\n\n            winners[i].withdrawed = true;\n            payable(winners[i].recipient).transfer(bonusPerWinner);\n        }\n    }\n}\n"
    },
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Verifier.sol\";\nimport \"./MerkleTree.sol\";\nimport \"./Statusable.sol\";\n\nabstract contract Lottery is Statusable, MerkleTree, Ownable {\n    struct Winner {\n        bool withdrawed;\n        bytes32 nullifierHash;\n        address recipient;\n    }\n\n    struct Player {\n        bool withdrawed;\n        address recipient;\n    }\n\n    uint32 public winningNumber;\n    uint32 public minimumDifference;\n    uint32 public winnerCount;\n    uint32 public playerCount;\n\n    uint256 public immutable id;\n    uint256 public immutable denomination;\n    bytes32 public immutable nonceHash;\n    uint256 public immutable creatingBlock;\n    uint256 public immutable waitingBlocks;\n    uint256 public immutable lockingBlocks;\n    uint256 public startingBlock;\n\n    Verifier public immutable verifier;\n\n    mapping(bytes32 => bool) public commitments;\n    mapping(uint32 => Player) public players;\n    mapping(uint32 => Winner) public winners;\n\n    event Commit(\n        address indexed player,\n        uint32 indexed playerIndex,\n        uint32 leafIndex,\n        bytes32 commitment\n    );\n\n    event Claim(\n        address indexed winner,\n        uint32 indexed winnerIndex,\n        uint32 difference,\n        bytes32 nullifierHash\n    );\n\n    constructor(\n        uint256 _id,\n        uint256 _denomination,\n        uint256 _waitingBlocks,\n        uint256 _lockingBlocks,\n        bytes32 _nonceHash,\n        uint32 _levels,\n        address _verifier,\n        address _hasher\n    ) MerkleTree(_levels, _hasher) {\n        require(_waitingBlocks > 0, \"Lottery: _waitingBlocks should be > 0\");\n        require(_lockingBlocks > 0, \"Lottery: _waitingBlocks should be > 0\");\n        require(_denomination > 0, \"Lottery: _denomination should be > 0\");\n        require(\n            uint256(_nonceHash) != 0,\n            \"Lottery: _nonceHash should not be null\"\n        );\n        require(\n            _verifier != address(0),\n            \"Lottery: _verifier should not be null\"\n        );\n\n        minimumDifference = type(uint32).max;\n\n        id = _id;\n        denomination = _denomination;\n        creatingBlock = block.number;\n        waitingBlocks = _waitingBlocks;\n        lockingBlocks = _lockingBlocks;\n        nonceHash = _nonceHash;\n\n        verifier = Verifier(_verifier);\n    }\n\n    /// @dev current bonus in prize pool\n    /// @return uint the amount of bonus\n    function currentBonus() public view virtual returns (uint);\n\n    function commit(bytes32 _commitment)\n        external\n        payable\n        virtual\n        onlyStatus(Status.PENDING)\n    {\n        require(\n            !commitments[_commitment],\n            \"Lottery: the commitment is exsited\"\n        );\n\n        uint32 insertedIndex = _insert(_commitment);\n        commitments[_commitment] = true;\n\n        players[playerCount] = Player({\n            withdrawed: false,\n            recipient: msg.sender\n        });\n        playerCount++;\n\n        _processCommit();\n\n        emit Commit(msg.sender, playerCount - 1, insertedIndex, _commitment);\n    }\n\n    function claim(\n        bytes32 _root,\n        uint32 _difference,\n        bytes32 _nullifierHash,\n        address _recipient,\n        uint256[8] calldata _proof\n    ) external onlyStatus(Status.REVEALING) {\n        require(isRoot(_root), \"Lottery: wrong merkle root\");\n        require(\n            _difference <= minimumDifference,\n            \"Lottery: invalid _difference\"\n        );\n\n        require(\n            verifier.verifyProof(\n                [_proof[0], _proof[1]],\n                [[_proof[2], _proof[3]], [_proof[4], _proof[5]]],\n                [_proof[6], _proof[7]],\n                [\n                    uint256(_root),\n                    uint256(winningNumber),\n                    uint256(_difference),\n                    uint256(_nullifierHash),\n                    uint256(uint160(_recipient))\n                ]\n            ),\n            \"Lottery: invalid proof\"\n        );\n\n        if (_difference == minimumDifference) {\n            for (uint32 i = 0; i < winnerCount; i++) {\n                require(\n                    winners[i].nullifierHash != _nullifierHash,\n                    \"Lottery: no need to claim twice\"\n                );\n            }\n        } else {\n            for (uint32 i = 0; i < winnerCount; i++) {\n                delete (winners[i]);\n            }\n            minimumDifference = _difference;\n            winnerCount = 0;\n        }\n\n        winners[winnerCount] = (\n            Winner({\n                withdrawed: false,\n                nullifierHash: _nullifierHash,\n                recipient: _recipient\n            })\n        );\n        winnerCount++;\n\n        _processClaim();\n\n        emit Claim(_recipient, winnerCount - 1, _difference, _nullifierHash);\n    }\n\n    function prepare() external payable onlyStatus(Status.PENDING) {\n        require(\n            block.number > creatingBlock + waitingBlocks,\n            \"Lottery: waiting for committing, can not go next now\"\n        );\n\n        require(playerCount > 0, \"Lottery: not enough players\");\n    \n        startingBlock = block.number;\n\n        _prepare();\n    }\n\n    function reveal(bytes32 nonce) external onlyStatus(Status.PREPARING) {\n        require(startingBlock > 0, \"Lottery: no randomizing block\");\n        require(\n            keccak256(abi.encodePacked(nonce)) == nonceHash,\n            \"Lottery: invalid nonce\"\n        );\n\n        _reveal();\n\n        uint256 randomNumber = _generateRandomNumber(nonce);\n        winningNumber = uint32(\n            uint256(keccak256(abi.encodePacked(id, nonce, randomNumber)))\n        );\n    }\n\n    function finalize() external onlyStatus(Status.REVEALING) {\n        require(\n            block.number > startingBlock + lockingBlocks,\n            \"Lottery: fund is locking, can not finalize now\"\n        );\n\n        _finalize();\n    }\n\n    receive() external payable {}\n\n    function _processCommit() internal virtual {}\n\n    function _processClaim() internal virtual {}\n\n    function _generateRandomNumber(bytes32 nonce)\n        internal\n        view\n        virtual\n        returns (uint256);\n}\n"
    },
    "contracts/WitnetRNG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"witnet-solidity-bridge/contracts/interfaces/IWitnetRandomness.sol\";\n\nabstract contract WitnetRNG {\n    IWitnetRandomness public witnet;\n\n    constructor(address _witnet) {\n        require(_witnet != address(0), \"WitnetRNG: invalid witnet contract address\");\n\n        witnet = IWitnetRandomness(_witnet);\n    }\n\n    function _checkRandomize(uint256 blockNumber) internal view {\n        require(witnet.isRandomized(blockNumber), \"WitnetRNG: block should be randomized\");\n    }\n\n    function _randomize(uint256 blockNumber) internal {\n        if (!witnet.isRandomized(blockNumber)) {\n            uint256 _usedFunds = witnet.randomize{value: msg.value}();\n            if (_usedFunds < msg.value) {\n                payable(msg.sender).transfer(msg.value - _usedFunds);\n            }\n        }\n    }\n\n    function _getRandomNumber(bytes32 nonce, uint256 blockNumber)\n        internal\n        view\n        returns (uint32)\n    {\n        return witnet.random(type(uint32).max, uint256(nonce), blockNumber);\n    }\n}\n"
    },
    "contracts/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IToken {\n    function redeem(uint redeemTokens) external returns (uint);\n    // function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function mint() external payable;\n    function balanceOf(address owner) external view returns (uint256);\n    // function balanceOfUnderlying(address owner) external returns (uint);\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Verifier.sol": {
      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\nlibrary Pairing {\n    struct G1Point {\n        uint X;\n        uint Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint[2] X;\n        uint[2] Y;\n    }\n    /// @return the generator of G1\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n    /// @return the generator of G2\n    function P2() internal pure returns (G2Point memory) {\n        // Original code point\n        return G2Point(\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\n        );\n\n/*\n        // Changed by Jordi point\n        return G2Point(\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\n        );\n*/\n    }\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\n        // The prime q in the base field F_q for G1\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 && p.Y == 0)\n            return G1Point(0, 0);\n        return G1Point(p.X, q - (p.Y % q));\n    }\n    /// @return r the sum of two points of G1\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\n        uint[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n        require(success,\"pairing-add-failed\");\n    }\n    /// @return r the product of a point on G1 and a scalar, i.e.\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\n        uint[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n        require (success,\"pairing-mul-failed\");\n    }\n    /// @return the result of computing the pairing check\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\n        require(p1.length == p2.length,\"pairing-lengths-failed\");\n        uint elements = p1.length;\n        uint inputSize = elements * 6;\n        uint[] memory input = new uint[](inputSize);\n        for (uint i = 0; i < elements; i++)\n        {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint[1] memory out;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n        require(success,\"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n    /// Convenience method for a pairing check for two pairs.\n    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for three pairs.\n    function pairingProd3(\n            G1Point memory a1, G2Point memory a2,\n            G1Point memory b1, G2Point memory b2,\n            G1Point memory c1, G2Point memory c2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for four pairs.\n    function pairingProd4(\n            G1Point memory a1, G2Point memory a2,\n            G1Point memory b1, G2Point memory b2,\n            G1Point memory c1, G2Point memory c2,\n            G1Point memory d1, G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\ncontract Verifier {\n    using Pairing for *;\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[] IC;\n    }\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n    }\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\n        );\n\n        vk.beta2 = Pairing.G2Point(\n            [4252822878758300859123897981450591353533073413197771768651442665752259397132,\n             6375614351688725206403948262868962793625744043794305715222011528459656738731],\n            [21847035105528745403288232691147584728191162732299865338377159692350059136679,\n             10505242626370262277552901082094356697409835680220590971873171140371331206856]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [7735944698998302166488290528027195950931379398304470621154383795744443727941,\n             9798150258711573474369691457501798378702172034002129936395694502915487287001],\n            [16938856464891702505565758699161320592967643309656123771731365146883791349962,\n             18492699206850637924378603020940285120264214453064705936570349923524103555449]\n        );\n        vk.IC = new Pairing.G1Point[](6);\n        \n        vk.IC[0] = Pairing.G1Point( \n            6808862908260841666087234177370763149935480476079600022896128990669323282542,\n            11911449450573897993011788693198144913510354785680620317207226139322816882934\n        );                                      \n        \n        vk.IC[1] = Pairing.G1Point( \n            14227923219770174576330297375473775203584240559203427332535626185141044389182,\n            14003607166008059394104656293639002174805608617712900159810321468983383760576\n        );                                      \n        \n        vk.IC[2] = Pairing.G1Point( \n            4966212753378531457907488851199846324256843776559903545235692820074765110513,\n            13741397303735637906175719912461321513875247889958137044375980549277838451102\n        );                                      \n        \n        vk.IC[3] = Pairing.G1Point( \n            11958795884288258655110128053035979408443927760149677280800531806569909035117,\n            709923153033217865826608452914082562768575766025544493669933397465109801860\n        );                                      \n        \n        vk.IC[4] = Pairing.G1Point( \n            17236321305527969402681952284040913305253346343792219930049977973685766365295,\n            21001964179754988552104931806503292004742907975852807267451816368734946129860\n        );                                      \n        \n        vk.IC[5] = Pairing.G1Point( \n            193994132775940350182813142086693450600247973530773557810592413656991376056,\n            17127321652842445480640285405652343762257306764103341281122036813530834655455\n        );                                      \n        \n    }\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKey memory vk = verifyingKey();\n        require(input.length + 1 == vk.IC.length,\"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint i = 0; i < input.length; i++) {\n            require(input[i] < snark_scalar_field,\"verifier-gte-snark-scalar-field\");\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\n        }\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\n        if (!Pairing.pairingProd4(\n            Pairing.negate(proof.A), proof.B,\n            vk.alfa1, vk.beta2,\n            vk_x, vk.gamma2,\n            proof.C, vk.delta2\n        )) return 1;\n        return 0;\n    }\n    /// @return r  bool true if proof is valid\n    function verifyProof(\n            uint[2] memory a,\n            uint[2][2] memory b,\n            uint[2] memory c,\n            uint[5] memory input\n        ) public view returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        uint[] memory inputValues = new uint[](input.length);\n        for(uint i = 0; i < input.length; i++){\n            inputValues[i] = input[i];\n        }\n        if (verify(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "contracts/MerkleTree.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IHasher.sol\";\n\ncontract MerkleTree {\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n  uint256 public constant ZERO_VALUE = 20343323298587817426263677225246066699666576009463223639062948340668151826010; // = keccak256(\"anowon\") % FIELD_SIZE\n  IHasher public immutable hasher;\n\n  uint32 public levels;\n\n  // the following variables are made public for easier testing and debugging and\n  // are not supposed to be accessed in regular code\n\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\n  // it removes index range check on every interaction\n  mapping(uint256 => bytes32) public filledSubtrees;\n  bytes32 public root;\n  uint32 public nextIndex = 0;\n\n  constructor(uint32 _levels, address _hasher) {\n    require(_levels > 0, \"MerkleTree: _levels should be greater than zero\");\n    require(_levels < 11, \"MerkleTree: _levels should be less than 11\");\n    require(_hasher != address(0), \"MerkleTree: _hasher should not be null\");\n\n    levels = _levels;\n    hasher = IHasher(_hasher);\n    root = zeros(_levels - 1);\n\n    for (uint32 i = 0; i < _levels; i++) {\n      filledSubtrees[i] = zeros(i);\n    }\n  }\n\n  /**\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\n  */\n  function hashLeftRight(\n    IHasher _hasher,\n    bytes32 _left,\n    bytes32 _right\n  ) public pure returns (bytes32) {\n    require(uint256(_left) < FIELD_SIZE, \"MerkleTree: _left should be inside the field\");\n    require(uint256(_right) < FIELD_SIZE, \"MerkleTree: _right should be inside the field\");\n    uint256 R = uint256(_left);\n    uint256 C = 0;\n    (R, C) = _hasher.MiMCSponge(R, C, 0);\n    R = addmod(R, uint256(_right), FIELD_SIZE);\n    (R, C) = _hasher.MiMCSponge(R, C, 0);\n    return bytes32(R);\n  }\n\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\n    uint32 _nextIndex = nextIndex;\n    require(_nextIndex != uint32(2)**levels, \"MerkleTree: tree is full. No more leaves can be added\");\n    uint32 currentIndex = _nextIndex;\n    bytes32 currentLevelHash = _leaf;\n    bytes32 left;\n    bytes32 right;\n\n    for (uint32 i = 0; i < levels; i++) {\n      if (currentIndex % 2 == 0) {\n        left = currentLevelHash;\n        right = zeros(i);\n        filledSubtrees[i] = currentLevelHash;\n      } else {\n        left = filledSubtrees[i];\n        right = currentLevelHash;\n      }\n      currentLevelHash = hashLeftRight(hasher, left, right);\n      currentIndex /= 2;\n    }\n\n    root = currentLevelHash;\n    nextIndex = _nextIndex + 1;\n    return _nextIndex;\n  }\n\n  /**\n    @dev Whether the root is right\n  */\n  function isRoot(bytes32 _root) public view returns (bool) {\n    return _root == root;\n  }\n\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 10 levels\n  function zeros(uint256 i) public pure returns (bytes32) {\n    if (i == 0) return bytes32(0x2cf9e9b70ba26273d0d92524f1f242af2b129368526a6b0ab4ae5b3c7dd7065a);\n    else if (i == 1) return bytes32(0x1635b2d36ff63121694af49a4d3c3cca8c740fcfe2aa33e7a4f6202e59fd4f44);\n    else if (i == 2) return bytes32(0x16393d132a31040fe66b041853502aad2deffb6fbaddbdbef588a2954282942b);\n    else if (i == 3) return bytes32(0x0a3ae4392887fb7944f5cec9d35f2543280c655dd770be15bc22c9dd29194cba);\n    else if (i == 4) return bytes32(0x24ff60aad4c2e0c6f767bd185a5a654b4d8d4177fc255d945e7f3376bc467700);\n    else if (i == 5) return bytes32(0x0759516e53eb36eb2ec242a0822d280b6d809e02af7da37313b41023c0b8a071);\n    else if (i == 6) return bytes32(0x07417447bde93ab35150909062b8e02f39df89d070c35cbf1b9c0cf40c11e703);\n    else if (i == 7) return bytes32(0x1bfd31be5498363e0675ab0b52903cb93d500ad5d2930dc503f846d2e240f711);\n    else if (i == 8) return bytes32(0x15fb7c999bcc1c8961a584a78e4ff1c97037ae3ffbdfd8c1ef82e92e1d985422);\n    else if (i == 9) return bytes32(0x28088429e37798c8f5a3f6ef6b26dac6c957974f30df1da1dfe110fd3358ac15);\n    else if (i == 10) return bytes32(0x116fa58935dd461ff4956795241840c9fe15a28a8dfbc59141b666c07060394f);\n    else revert(\"MerkleTree: index out of bounds\");\n  }\n}\n"
    },
    "contracts/Statusable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Statusable {\n    enum Status {\n        PENDING,\n        PREPARING,\n        REVEALING,\n        DONE\n    }\n\n    Status public status;\n\n    modifier onlyStatus(Status _status) {\n        _checkStatus(_status);\n        _;\n    }\n\n    constructor() {\n        status = Status.PENDING;\n    }\n\n    function _checkStatus(Status _status) internal view {\n        require(status == _status, string(abi.encodePacked(\"Statusable: status is not right\")));\n    }\n\n    function _prepare() internal {\n        require(\n            status == Status.PENDING,\n            \"Lottery: can only prepare at pending status\"\n        );\n\n        _beforePrepare();\n        status = Status.PREPARING;\n        _afterPrepare();\n    }\n\n    function _reveal() internal {\n        require(\n            status == Status.PREPARING,\n            \"Lottery: can only reveal at preparing status\"\n        );\n\n        _beforeReveal();\n        status = Status.REVEALING;\n        _afterReveal();\n    }\n\n    function _finalize() internal {\n        require(\n            status == Status.REVEALING,\n            \"Lottery: can only finalize at revealing status\"\n        );\n\n        _beforeFinalize();\n        status = Status.DONE;\n        _afterFinalize();\n    }\n\n    function _beforePrepare() internal virtual {}\n\n    function _afterPrepare() internal virtual {}\n    \n    function _beforeReveal() internal virtual {}\n\n    function _afterReveal() internal virtual {}\n\n    function _beforeFinalize() internal virtual {}\n\n    function _afterFinalize() internal virtual {}\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/IHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IHasher {\n  function MiMCSponge(uint256 xL_in, uint256 xR_in, uint256 k) external pure returns (uint256 xL, uint256 xR);\n}"
    },
    "witnet-solidity-bridge/contracts/interfaces/IWitnetRandomness.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../libs/Witnet.sol\";\n\n/// @title The Witnet Randomness generator interface.\n/// @author Witnet Foundation.\ninterface IWitnetRandomness {\n\n    /// Thrown every time a new WitnetRandomnessRequest gets succesfully posted to the WitnetRequestBoard.\n    /// @param from Address from which the randomize() function was called. \n    /// @param prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\n    /// @param witnetQueryId Unique query id assigned to this request by the WRB.\n    /// @param witnetRequestHash SHA-256 hash of the WitnetRandomnessRequest actual bytecode just posted to the WRB.\n    event Randomized(\n        address indexed from,\n        uint256 indexed prevBlock,\n        uint256 witnetQueryId,\n        bytes32 witnetRequestHash\n    );\n\n    /// Returns amount of wei required to be paid as a fee when requesting randomization with a \n    /// transaction gas price as the one given.\n    function estimateRandomizeFee(uint256 _gasPrice) external view returns (uint256);\n\n    /// Retrieves data of a randomization request that got successfully posted to the WRB within a given block.\n    /// @dev Returns zero values if no randomness request was actually posted within a given block.\n    /// @param _block Block number whose randomness request is being queried for.\n    /// @return _from Address from which the latest randomness request was posted.\n    /// @return _id Unique request identifier as provided by the WRB.\n    /// @return _prevBlock Block number in which a randomness request got posted just before this one. 0 if none.\n    /// @return _nextBlock Block number in which a randomness request got posted just after this one, 0 if none.\n    function getRandomizeData(uint256 _block)\n        external view returns (address _from, uint256 _id, uint256 _prevBlock, uint256 _nextBlock);\n\n    /// Retrieves the randomness generated upon solving a request that was posted within a given block,\n    /// if any, or to the _first_ request posted after that block, otherwise. Should the intended \n    /// request happen to be finalized with errors on the Witnet oracle network side, this function \n    /// will recursively try to return randomness from the next non-faulty randomization request found \n    /// in storage, if any. \n    /// @dev Fails if:\n    /// @dev   i.   no `randomize()` was not called in either the given block, or afterwards.\n    /// @dev   ii.  a request posted in/after given block does exist, but no result has been provided yet.\n    /// @dev   iii. all requests in/after the given block were solved with errors.\n    /// @param _block Block number from which the search will start.\n    function getRandomnessAfter(uint256 _block) external view returns (bytes32); \n\n    /// Tells what is the number of the next block in which a randomization request was posted after the given one. \n    /// @param _block Block number from which the search will start.\n    /// @return Number of the first block found after the given one, or `0` otherwise.\n    function getRandomnessNextBlock(uint256 _block) external view returns (uint256); \n\n    /// Gets previous block in which a randomness request was posted before the given one.\n    /// @param _block Block number from which the search will start.\n    /// @return First block found before the given one, or `0` otherwise.\n    function getRandomnessPrevBlock(uint256 _block) external view returns (uint256);\n\n    /// Returns `true` only when the randomness request that got posted within given block was already\n    /// reported back from the Witnet oracle, either successfully or with an error of any kind.\n    function isRandomized(uint256 _block) external view returns (bool);\n\n    /// Returns latest block in which a randomness request got sucessfully posted to the WRB.\n    function latestRandomizeBlock() external view returns (uint256);\n\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \n    /// the given `_nonce` value and the randomness returned by `getRandomnessAfter(_block)`. \n    /// @dev Fails under same conditions as `getRandomnessAfter(uint256)` may do.\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\n    /// @param _block Block number from which the search will start.\n    function random(uint32 _range, uint256 _nonce, uint256 _block) external view returns (uint32);\n\n    /// Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using \n    /// the given `_nonce` value and the given `_seed` as a source of entropy.\n    /// @param _range Range within which the uniformly-distributed random number will be generated.\n    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.\n    /// @param _seed Seed value used as entropy source.\n    function random(uint32 _range, uint256 _nonce, bytes32 _seed) external pure returns (uint32);\n\n    /// Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. \n    /// Only one randomness request per block will be actually posted to the WRB. Should there \n    /// already be a posted request within current block, it will try to upgrade Witnet fee of current's \n    /// block randomness request according to current gas price. In both cases, all unused funds shall \n    /// be transfered back to the tx sender.\n    /// @return _usedFunds Amount of funds actually used from those provided by the tx sender.\n    function randomize() external payable returns (uint256 _usedFunds);\n\n    /// Increases Witnet fee related to a pending-to-be-solved randomness request, as much as it\n    /// may be required in proportion to how much bigger the current tx gas price is with respect the \n    /// highest gas price that was paid in either previous fee upgrades, or when the given randomness \n    /// request was posted. All unused funds shall be transferred back to the tx sender.\n    /// @return _usedFunds Amount of dunds actually used from those provided by the tx sender.\n    function upgradeRandomizeFee(uint256 _block) external payable returns (uint256 _usedFunds);\n}\n"
    },
    "witnet-solidity-bridge/contracts/libs/Witnet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/IWitnetRequest.sol\";\n\nlibrary Witnet {\n\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\n    /// @param _bytecode CBOR-encoded RADON.\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\n        return sha256(_bytecode);\n    }\n\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\n    struct Query {\n        Request request;\n        Response response;\n        address from;      // Address from which the request was posted.\n    }\n\n    /// Possible status of a Witnet query.\n    enum QueryStatus {\n        Unknown,\n        Posted,\n        Reported,\n        Deleted\n    }\n\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\n    struct Request {\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\n        address requester;      // Address from which the request was posted.\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\n    }\n\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\n    struct Response {\n        address reporter;       // Address from which the result was reported.\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\n    }\n\n    /// Data struct containing the Witnet-provided result to a Data Request.\n    struct Result {\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\n    }\n\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\n    struct CBOR {\n        Buffer buffer;\n        uint8 initialByte;\n        uint8 majorType;\n        uint8 additionalInformation;\n        uint64 len;\n        uint64 tag;\n    }\n\n    /// Iterable bytes buffer.\n    struct Buffer {\n        bytes data;\n        uint32 cursor;\n    }\n\n    /// Witnet error codes table.\n    enum ErrorCodes {\n        // 0x00: Unknown error. Something went really bad!\n        Unknown,\n        // Script format errors\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\n        SourceScriptNotCBOR,\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\n        SourceScriptNotArray,\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\n        SourceScriptNotRADON,\n        /// Unallocated\n        ScriptFormat0x04,\n        ScriptFormat0x05,\n        ScriptFormat0x06,\n        ScriptFormat0x07,\n        ScriptFormat0x08,\n        ScriptFormat0x09,\n        ScriptFormat0x0A,\n        ScriptFormat0x0B,\n        ScriptFormat0x0C,\n        ScriptFormat0x0D,\n        ScriptFormat0x0E,\n        ScriptFormat0x0F,\n        // Complexity errors\n        /// 0x10: The request contains too many sources.\n        RequestTooManySources,\n        /// 0x11: The script contains too many calls.\n        ScriptTooManyCalls,\n        /// Unallocated\n        Complexity0x12,\n        Complexity0x13,\n        Complexity0x14,\n        Complexity0x15,\n        Complexity0x16,\n        Complexity0x17,\n        Complexity0x18,\n        Complexity0x19,\n        Complexity0x1A,\n        Complexity0x1B,\n        Complexity0x1C,\n        Complexity0x1D,\n        Complexity0x1E,\n        Complexity0x1F,\n        // Operator errors\n        /// 0x20: The operator does not exist.\n        UnsupportedOperator,\n        /// Unallocated\n        Operator0x21,\n        Operator0x22,\n        Operator0x23,\n        Operator0x24,\n        Operator0x25,\n        Operator0x26,\n        Operator0x27,\n        Operator0x28,\n        Operator0x29,\n        Operator0x2A,\n        Operator0x2B,\n        Operator0x2C,\n        Operator0x2D,\n        Operator0x2E,\n        Operator0x2F,\n        // Retrieval-specific errors\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\n        HTTP,\n        /// 0x31: Retrieval of at least one of the sources timed out.\n        RetrievalTimeout,\n        /// Unallocated\n        Retrieval0x32,\n        Retrieval0x33,\n        Retrieval0x34,\n        Retrieval0x35,\n        Retrieval0x36,\n        Retrieval0x37,\n        Retrieval0x38,\n        Retrieval0x39,\n        Retrieval0x3A,\n        Retrieval0x3B,\n        Retrieval0x3C,\n        Retrieval0x3D,\n        Retrieval0x3E,\n        Retrieval0x3F,\n        // Math errors\n        /// 0x40: Math operator caused an underflow.\n        Underflow,\n        /// 0x41: Math operator caused an overflow.\n        Overflow,\n        /// 0x42: Tried to divide by zero.\n        DivisionByZero,\n        /// Unallocated\n        Math0x43,\n        Math0x44,\n        Math0x45,\n        Math0x46,\n        Math0x47,\n        Math0x48,\n        Math0x49,\n        Math0x4A,\n        Math0x4B,\n        Math0x4C,\n        Math0x4D,\n        Math0x4E,\n        Math0x4F,\n        // Other errors\n        /// 0x50: Received zero reveals\n        NoReveals,\n        /// 0x51: Insufficient consensus in tally precondition clause\n        InsufficientConsensus,\n        /// 0x52: Received zero commits\n        InsufficientCommits,\n        /// 0x53: Generic error during tally execution\n        TallyExecution,\n        /// Unallocated\n        OtherError0x54,\n        OtherError0x55,\n        OtherError0x56,\n        OtherError0x57,\n        OtherError0x58,\n        OtherError0x59,\n        OtherError0x5A,\n        OtherError0x5B,\n        OtherError0x5C,\n        OtherError0x5D,\n        OtherError0x5E,\n        OtherError0x5F,\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\n        MalformedReveal,\n        /// Unallocated\n        OtherError0x61,\n        OtherError0x62,\n        OtherError0x63,\n        OtherError0x64,\n        OtherError0x65,\n        OtherError0x66,\n        OtherError0x67,\n        OtherError0x68,\n        OtherError0x69,\n        OtherError0x6A,\n        OtherError0x6B,\n        OtherError0x6C,\n        OtherError0x6D,\n        OtherError0x6E,\n        OtherError0x6F,\n        // Access errors\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\n        ArrayIndexOutOfBounds,\n        /// 0x71: Tried to access a value from a map using a key that does not exist\n        MapKeyNotFound,\n        /// Unallocated\n        OtherError0x72,\n        OtherError0x73,\n        OtherError0x74,\n        OtherError0x75,\n        OtherError0x76,\n        OtherError0x77,\n        OtherError0x78,\n        OtherError0x79,\n        OtherError0x7A,\n        OtherError0x7B,\n        OtherError0x7C,\n        OtherError0x7D,\n        OtherError0x7E,\n        OtherError0x7F,\n        OtherError0x80,\n        OtherError0x81,\n        OtherError0x82,\n        OtherError0x83,\n        OtherError0x84,\n        OtherError0x85,\n        OtherError0x86,\n        OtherError0x87,\n        OtherError0x88,\n        OtherError0x89,\n        OtherError0x8A,\n        OtherError0x8B,\n        OtherError0x8C,\n        OtherError0x8D,\n        OtherError0x8E,\n        OtherError0x8F,\n        OtherError0x90,\n        OtherError0x91,\n        OtherError0x92,\n        OtherError0x93,\n        OtherError0x94,\n        OtherError0x95,\n        OtherError0x96,\n        OtherError0x97,\n        OtherError0x98,\n        OtherError0x99,\n        OtherError0x9A,\n        OtherError0x9B,\n        OtherError0x9C,\n        OtherError0x9D,\n        OtherError0x9E,\n        OtherError0x9F,\n        OtherError0xA0,\n        OtherError0xA1,\n        OtherError0xA2,\n        OtherError0xA3,\n        OtherError0xA4,\n        OtherError0xA5,\n        OtherError0xA6,\n        OtherError0xA7,\n        OtherError0xA8,\n        OtherError0xA9,\n        OtherError0xAA,\n        OtherError0xAB,\n        OtherError0xAC,\n        OtherError0xAD,\n        OtherError0xAE,\n        OtherError0xAF,\n        OtherError0xB0,\n        OtherError0xB1,\n        OtherError0xB2,\n        OtherError0xB3,\n        OtherError0xB4,\n        OtherError0xB5,\n        OtherError0xB6,\n        OtherError0xB7,\n        OtherError0xB8,\n        OtherError0xB9,\n        OtherError0xBA,\n        OtherError0xBB,\n        OtherError0xBC,\n        OtherError0xBD,\n        OtherError0xBE,\n        OtherError0xBF,\n        OtherError0xC0,\n        OtherError0xC1,\n        OtherError0xC2,\n        OtherError0xC3,\n        OtherError0xC4,\n        OtherError0xC5,\n        OtherError0xC6,\n        OtherError0xC7,\n        OtherError0xC8,\n        OtherError0xC9,\n        OtherError0xCA,\n        OtherError0xCB,\n        OtherError0xCC,\n        OtherError0xCD,\n        OtherError0xCE,\n        OtherError0xCF,\n        OtherError0xD0,\n        OtherError0xD1,\n        OtherError0xD2,\n        OtherError0xD3,\n        OtherError0xD4,\n        OtherError0xD5,\n        OtherError0xD6,\n        OtherError0xD7,\n        OtherError0xD8,\n        OtherError0xD9,\n        OtherError0xDA,\n        OtherError0xDB,\n        OtherError0xDC,\n        OtherError0xDD,\n        OtherError0xDE,\n        OtherError0xDF,\n        // Bridge errors: errors that only belong in inter-client communication\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\n        /// are never included into blocks and therefore never get a Tally in response.\n        BridgeMalformedRequest,\n        /// 0xE1: Witnesses exceeds 100\n        BridgePoorIncentives,\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\n        BridgeOversizedResult,\n        /// Unallocated\n        OtherError0xE3,\n        OtherError0xE4,\n        OtherError0xE5,\n        OtherError0xE6,\n        OtherError0xE7,\n        OtherError0xE8,\n        OtherError0xE9,\n        OtherError0xEA,\n        OtherError0xEB,\n        OtherError0xEC,\n        OtherError0xED,\n        OtherError0xEE,\n        OtherError0xEF,\n        OtherError0xF0,\n        OtherError0xF1,\n        OtherError0xF2,\n        OtherError0xF3,\n        OtherError0xF4,\n        OtherError0xF5,\n        OtherError0xF6,\n        OtherError0xF7,\n        OtherError0xF8,\n        OtherError0xF9,\n        OtherError0xFA,\n        OtherError0xFB,\n        OtherError0xFC,\n        OtherError0xFD,\n        OtherError0xFE,\n        // This should not exist:\n        /// 0xFF: Some tally error is not intercepted but should\n        UnhandledIntercept\n    }\n}\n"
    },
    "witnet-solidity-bridge/contracts/interfaces/IWitnetRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title The Witnet Data Request basic interface.\n/// @author The Witnet Foundation.\ninterface IWitnetRequest {\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \n    /// a well-formed Witnet Data Request using Protocol Buffers.\n    function bytecode() external view returns (bytes memory);\n\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\n    function hash() external view returns (bytes32);\n}\n"
    },
    "contracts/CROLotteryFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./CROLottery.sol\";\n\ncontract CROLotteryFactory is Ownable {\n    uint256 public counter;\n\n    uint32 public levels;\n    address public hasher;\n    address public verifier;\n\n    address public witnet;\n    address public tCRO;\n\n    Lottery[] private lotteries;\n\n    constructor(\n        uint32 _levels,\n        address _hasher,\n        address _verifier,\n        address _witnet,\n        address _tCRO\n    ) {\n        levels = _levels;\n        hasher = _hasher;\n        verifier = _verifier;\n        witnet = _witnet;\n        tCRO = _tCRO;\n    }\n\n    function createLottery(\n        bytes32 _nonceHash,\n        uint256 _denomination,\n        uint256 _waitingBlocks,\n        uint256 _lockingBlocks\n    ) public returns (address) {\n        CROLottery newLottery = new CROLottery(\n            counter,\n            _denomination,\n            _waitingBlocks,\n            _lockingBlocks,\n            _nonceHash,\n            levels,\n            verifier,\n            hasher,\n            witnet,\n            tCRO\n        );\n        lotteries.push(newLottery);\n        counter++;\n\n        return address(newLottery);\n    }\n\n    function lottery(uint256 id) public view returns (address) {\n        return address(lotteries[id]);\n    }\n\n    function lotteryCount() public view returns (uint) {\n        return counter;\n    }\n\n    function setLevels(uint32 _levels) public onlyOwner {\n        levels = _levels;\n    }\n\n    function setHasher(address _hasher) public onlyOwner {\n        hasher = _hasher;\n    }\n\n    function setVerifier(address _verifier) public onlyOwner {\n        verifier = _verifier;\n    }\n\n    function setWitnet(address _witnet) public onlyOwner {\n        witnet = _witnet;\n    }\n\n    function setTCRO(address _tCRO) public onlyOwner {\n        tCRO = _tCRO;\n    }\n\n    function withdraw() external {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mocks/DummyTCRO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract DummyTCRO is ERC20 {\n\n    constructor() ERC20(\"Tectonic CRO\", \"TCRO\") {\n    }\n\n    function redeem(uint redeemTokens) external returns (uint) {\n        _burn(msg.sender, redeemTokens);\n        payable(msg.sender).transfer(redeemTokens);\n        return 0;\n    }\n\n    function mint() external payable {\n        _mint(msg.sender, msg.value + msg.value * 1 ether / 10 ether);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}